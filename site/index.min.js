(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (global){
//var React = require("react");
//var ReactDOM = require("react-dom");
for (var key in React.DOM) global[key] = React.DOM[key];

var Dunno = React.createClass({

    getInitialState: function(){
        return {
            id        : 0,
            ws        : null,
            page      : "home",
            question  : "",
            questions : [],
            answereds : [], // ids of the questions I don't know
            dunnos    : [], // ids of the questions I don't know
            points    : 0
        };
    },

    componentDidMount: function(){
        var ws = new WebSocket(SERVER_URL);
        ws.onopen = function(){
            console.log("connected");
        };
        ws.onmessage = function(msg){
            var actions = JSON.parse("["+msg.data+"]");
            if (this.state.id === 0){
                ++this.state.id;
                for (var i=0, l=actions.length; i<l; ++i)
                    if (actions[i].type === "join")
                        ++this.state.id;
            };
            for (var i=0, l=actions.length; i<l; ++i){
                var action = actions[i];
                var question = this.state.questions[action.question_id];
                switch (action.type){
                    case "ask":
                    this.state.questions.push({
                        "id"          : this.state.questions.length,
                        "user_id"     : action.user_id,
                        "text"        : action.question,
                        "time"        : action.time,
                        "answer"      : "",
                        "answer_time" : 0,
                        "persons"     : 0,
                        "status"      : "routing"}); // routing, accepted, refused
                    break;

                    case "answer":
                    question.answer = action.answer;
                    question.answer_time = action.time;
                    if (action.user_id === this.state.id)
                        this.state.answereds[action.question_id] = true;
                    break;

                    case "dunno":
                    ++question.persons;
                    if (action.user_id === this.state.id)
                        this.state.dunnos[action.question_id] = true;
                    break;

                    case "accept":
                    if (question.answer !== "" 
                        && question.status === "routing" 
                        && action.user_id === question.user_id){
                        question.status = "accepted";
                        if (this.state.answereds[question.id])
                            ++this.state.points;
                    };
                    break;

                    case "refuse":
                    if (question.answer !== "" 
                        && question.status === "routing" 
                        && action.user_id === question.user_id){
                        question.status = "refused";
                        if (this.state.answereds[question.id])
                            --this.state.points;
                    };
                    break;
                }
            };
            console.log("Client id is: "+this.state.id)
            console.log("Questions: "+JSON.stringify(this.state.questions));

            this.state.act = function(action){
                return function(){
                    ws.send(JSON.stringify(action));
                };
            };

            this.forceUpdate();
        }.bind(this);
        setInterval(function(){
            this.forceUpdate();
        }.bind(this), 500);
    },

    render: function() {

        function centralize(body){
            return div({"className": "centralizer_outer"},
                div({"className": "centralizer_inner"},
                body));
        };

        var question = function(question){

            var question_title = div({
                "className": "question_title"}, [
                question.text]);

            var question_seconds = div({
                "className": "question_seconds"},
                Math.floor(((question.answer_time||Date.now())-question.time)/1000)+'"');

            var question_persons = div({
                "className": "question_persons"},
                question.persons+"ì›ƒ"); // ðŸ‘¤

            var question_head_box = div({
                "className": "question_head_box"},[
                question_seconds,
                question_persons]);

            var question_accepted = div({
                "onClick": function(){
                    this.state.act({
                        "type":"accept",
                        "user_id": this.state.id,
                        "question_id":question.id})();
                }.bind(this),
                "className":"question_acception "+(question.status==="accepted"?"accepted":"")},
                "âœ“");

            var question_refused = div({
                "onClick": function(){
                    this.state.act({
                        "type":"refuse",
                        "user_id": this.state.id,
                        "question_id":question.id})();
                }.bind(this),
                "className":"question_acception "+(question.status==="refused"?"refused":"")},
                "âœ—");

            var question_acception_box = div({
                "className": "question_acception_box"},[
                question_accepted,
                question_refused]);


            var question_head = div({
                "className": "question_head"},[
                question_head_box,
                question_acception_box]);

            var question_answer = div({
                "className": "question_answer"},[
                question.answer !== ""
                    ? question.answer
                    : "Esperando resposta..."]);

            var question_body = div({
                "className": "question_body"},[
                question_title,
                question_answer]);
                
            return div({
                "className": "question"},[
                question_head,
                question_body
                ]);
        }.bind(this);

        var st = this.state;



        // HOME PAGE

        var logo = div({
            "onClick": function(){ st.page = "home"; }.bind(this),
            "className": st.page === "home" ? "logo" : "logo_small"},
            "dunno");

        var question_field = div({}, input({
            "id": "question_field",
            "key": "question_field",
            "className": "question_field",
            "placeholder": "<inserir slogan aqui>",
            "onKeyPress": function(e){ if (e.which === 13) ask(); },
            "onChange": function(e){
                st.question = e.target.value;
                this.forceUpdate();
            }.bind(this),
            "type": "text"}));

        var ask = function(){
            if (st.question.length === 0) return;
            this.state.act({
                "type"     : "ask",
                "question" : st.question,
                "time"     : Date.now(),
                "user_id"  : st.id})();
            st.question = "";
            st.page = "wall";
            this.forceUpdate();
            document.getElementById("question_field").value = "";
        }.bind(this);

        var ask_button = div({
            "id": "ask_button",
            "key": "ask_button",
            "onClick": ask,
            "className": "button ask_button"},
            ["Fazer pergunta"]);

        var quick_button = div({
            "id": "quick_button",
            "key": "quick_button",
            "onClick": function(){
                st.page = "answering";
                this.forceUpdate();
            }.bind(this),
            "className": "button quick_button"},
            ["Prefiro responder"]);

        var buttons_container = div({
            "key": "buttons_container",
            "className": "button_container"},
            [ask_button, quick_button]);

        var home = div({
            "className": "home"},
            [logo, question_field, buttons_container]);



        // WALLS PAGE

        var wall_top = div({
            "className": "wall_top"},
            centralize(
                div({
                    "className": "wall_top_content"}, [
                    logo,
                    question_field,
                    ask_button,
                    quick_button])));

        var my_questions = st.questions.filter(function(question){
            return question.user_id === st.id;
        }.bind(this)).reverse();

        var wall_body = centralize(my_questions.map(question));

        var wall = div({
            "className": "wall"},
            [wall_top, wall_body]);



        // ANSWERING PAGE

        var answering_points = div({
            "className": "answering_points"},
            "("+this.state.points+" ponto"+(this.state.points===1?"":"s")+"!)");

        var answering_top = div({
            "className": "answering_top"},[
            logo,
            answering_points]);

        function rand(seed){
            return (seed * 1103515245 + 12345) & 0x7fffffff;
        };

        var question_to_answer = (function(){
            var question_to_answer = null;
            var question_to_answer_rnd = 0;
            var rnd = rand(st.id);
            for (var i=0, l=st.questions.length; i<l; ++i){
                var rnd = rand(rnd);
                if (rnd > question_to_answer_rnd
                    && st.questions[i]
                    && st.questions[i].answer === ""
                    && !st.dunnos[i])
                    question_to_answer = st.questions[i],
                    question_to_answer_rnd = rnd;
            };
            return question_to_answer;
        })();

        var answering_question = question_to_answer ? question(question_to_answer) : [];

        var answer = function(){
            var input = document.getElementById("answering_input")
            this.state.act({
                "type"        : "answer",
                "time"        : Date.now(),
                "user_id"     : st.id,
                "question_id" : question_to_answer.id,
                "answer"      : input.value})();
            input.value = "";
        }.bind(this);

        var dunno = function(){
            this.state.act({
                "type"        : "dunno",
                "user_id"     : st.id,
                "question_id" : question_to_answer.id})();
        }.bind(this)

        var answering_answer = div({
            "className": "answering_button",
            "onClick": answer},
            "Responder");

        var answering_dunno = div({
            "className": "answering_button",
            "onClick": dunno},
            "Dunno")

        var answering_menu = div({
            "className": "answer_menu"}, [
            div({}, input({
                "id": "answering_input",
                "className": "answering_input",
                "onKeyDown": function(e){ if (e.which === 13) answer(); }})),
            div({}, [answering_answer, answering_dunno])]);

        var answering_body = div({
            className: "answering_body"},[
            answering_question,
            answering_menu]);

        //var answering_points = div({}, this.state.points+()" pontos!");

        var answering_done = div({
            className: "answering_done"}, [
            "Nada para responder! Esperando novas questÃµes."]);

        var answering = question_to_answer 
            ? div({}, [answering_top, centralize(answering_body)])
            : div({}, [answering_top, centralize(answering_done)]);

        return ( st.page === "home" ? home 
               : st.page === "wall" ? wall
               : answering);
    }
});

window.onload = function(){
    ReactDOM.render(
        React.createElement(Dunno, null),
        document.getElementById('test'));
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy5udm0vdmVyc2lvbnMvbm9kZS92NS45LjEvbGliL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJpbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiLy92YXIgUmVhY3QgPSByZXF1aXJlKFwicmVhY3RcIik7XG4vL3ZhciBSZWFjdERPTSA9IHJlcXVpcmUoXCJyZWFjdC1kb21cIik7XG5mb3IgKHZhciBrZXkgaW4gUmVhY3QuRE9NKSBnbG9iYWxba2V5XSA9IFJlYWN0LkRPTVtrZXldO1xuXG52YXIgRHVubm8gPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG5cbiAgICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uKCl7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpZCAgICAgICAgOiAwLFxuICAgICAgICAgICAgd3MgICAgICAgIDogbnVsbCxcbiAgICAgICAgICAgIHBhZ2UgICAgICA6IFwiaG9tZVwiLFxuICAgICAgICAgICAgcXVlc3Rpb24gIDogXCJcIixcbiAgICAgICAgICAgIHF1ZXN0aW9ucyA6IFtdLFxuICAgICAgICAgICAgYW5zd2VyZWRzIDogW10sIC8vIGlkcyBvZiB0aGUgcXVlc3Rpb25zIEkgZG9uJ3Qga25vd1xuICAgICAgICAgICAgZHVubm9zICAgIDogW10sIC8vIGlkcyBvZiB0aGUgcXVlc3Rpb25zIEkgZG9uJ3Qga25vd1xuICAgICAgICAgICAgcG9pbnRzICAgIDogMFxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24oKXtcbiAgICAgICAgdmFyIHdzID0gbmV3IFdlYlNvY2tldChTRVJWRVJfVVJMKTtcbiAgICAgICAgd3Mub25vcGVuID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiY29ubmVjdGVkXCIpO1xuICAgICAgICB9O1xuICAgICAgICB3cy5vbm1lc3NhZ2UgPSBmdW5jdGlvbihtc2cpe1xuICAgICAgICAgICAgdmFyIGFjdGlvbnMgPSBKU09OLnBhcnNlKFwiW1wiK21zZy5kYXRhK1wiXVwiKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnN0YXRlLmlkID09PSAwKXtcbiAgICAgICAgICAgICAgICArK3RoaXMuc3RhdGUuaWQ7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaT0wLCBsPWFjdGlvbnMubGVuZ3RoOyBpPGw7ICsraSlcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFjdGlvbnNbaV0udHlwZSA9PT0gXCJqb2luXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICArK3RoaXMuc3RhdGUuaWQ7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZm9yICh2YXIgaT0wLCBsPWFjdGlvbnMubGVuZ3RoOyBpPGw7ICsraSl7XG4gICAgICAgICAgICAgICAgdmFyIGFjdGlvbiA9IGFjdGlvbnNbaV07XG4gICAgICAgICAgICAgICAgdmFyIHF1ZXN0aW9uID0gdGhpcy5zdGF0ZS5xdWVzdGlvbnNbYWN0aW9uLnF1ZXN0aW9uX2lkXTtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGFjdGlvbi50eXBlKXtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImFza1wiOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLnF1ZXN0aW9ucy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiaWRcIiAgICAgICAgICA6IHRoaXMuc3RhdGUucXVlc3Rpb25zLmxlbmd0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwidXNlcl9pZFwiICAgICA6IGFjdGlvbi51c2VyX2lkLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJ0ZXh0XCIgICAgICAgIDogYWN0aW9uLnF1ZXN0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJ0aW1lXCIgICAgICAgIDogYWN0aW9uLnRpbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImFuc3dlclwiICAgICAgOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJhbnN3ZXJfdGltZVwiIDogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwicGVyc29uc1wiICAgICA6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBcInN0YXR1c1wiICAgICAgOiBcInJvdXRpbmdcIn0pOyAvLyByb3V0aW5nLCBhY2NlcHRlZCwgcmVmdXNlZFxuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiYW5zd2VyXCI6XG4gICAgICAgICAgICAgICAgICAgIHF1ZXN0aW9uLmFuc3dlciA9IGFjdGlvbi5hbnN3ZXI7XG4gICAgICAgICAgICAgICAgICAgIHF1ZXN0aW9uLmFuc3dlcl90aW1lID0gYWN0aW9uLnRpbWU7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhY3Rpb24udXNlcl9pZCA9PT0gdGhpcy5zdGF0ZS5pZClcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUuYW5zd2VyZWRzW2FjdGlvbi5xdWVzdGlvbl9pZF0gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiZHVubm9cIjpcbiAgICAgICAgICAgICAgICAgICAgKytxdWVzdGlvbi5wZXJzb25zO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYWN0aW9uLnVzZXJfaWQgPT09IHRoaXMuc3RhdGUuaWQpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLmR1bm5vc1thY3Rpb24ucXVlc3Rpb25faWRdID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImFjY2VwdFwiOlxuICAgICAgICAgICAgICAgICAgICBpZiAocXVlc3Rpb24uYW5zd2VyICE9PSBcIlwiIFxuICAgICAgICAgICAgICAgICAgICAgICAgJiYgcXVlc3Rpb24uc3RhdHVzID09PSBcInJvdXRpbmdcIiBcbiAgICAgICAgICAgICAgICAgICAgICAgICYmIGFjdGlvbi51c2VyX2lkID09PSBxdWVzdGlvbi51c2VyX2lkKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXN0aW9uLnN0YXR1cyA9IFwiYWNjZXB0ZWRcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnN0YXRlLmFuc3dlcmVkc1txdWVzdGlvbi5pZF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKyt0aGlzLnN0YXRlLnBvaW50cztcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcInJlZnVzZVwiOlxuICAgICAgICAgICAgICAgICAgICBpZiAocXVlc3Rpb24uYW5zd2VyICE9PSBcIlwiIFxuICAgICAgICAgICAgICAgICAgICAgICAgJiYgcXVlc3Rpb24uc3RhdHVzID09PSBcInJvdXRpbmdcIiBcbiAgICAgICAgICAgICAgICAgICAgICAgICYmIGFjdGlvbi51c2VyX2lkID09PSBxdWVzdGlvbi51c2VyX2lkKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXN0aW9uLnN0YXR1cyA9IFwicmVmdXNlZFwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc3RhdGUuYW5zd2VyZWRzW3F1ZXN0aW9uLmlkXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLXRoaXMuc3RhdGUucG9pbnRzO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJDbGllbnQgaWQgaXM6IFwiK3RoaXMuc3RhdGUuaWQpXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIlF1ZXN0aW9uczogXCIrSlNPTi5zdHJpbmdpZnkodGhpcy5zdGF0ZS5xdWVzdGlvbnMpKTtcblxuICAgICAgICAgICAgdGhpcy5zdGF0ZS5hY3QgPSBmdW5jdGlvbihhY3Rpb24pe1xuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICB3cy5zZW5kKEpTT04uc3RyaW5naWZ5KGFjdGlvbikpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB0aGlzLmZvcmNlVXBkYXRlKCk7XG4gICAgICAgIH0uYmluZCh0aGlzKTtcbiAgICAgICAgc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIHRoaXMuZm9yY2VVcGRhdGUoKTtcbiAgICAgICAgfS5iaW5kKHRoaXMpLCA1MDApO1xuICAgIH0sXG5cbiAgICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIGZ1bmN0aW9uIGNlbnRyYWxpemUoYm9keSl7XG4gICAgICAgICAgICByZXR1cm4gZGl2KHtcImNsYXNzTmFtZVwiOiBcImNlbnRyYWxpemVyX291dGVyXCJ9LFxuICAgICAgICAgICAgICAgIGRpdih7XCJjbGFzc05hbWVcIjogXCJjZW50cmFsaXplcl9pbm5lclwifSxcbiAgICAgICAgICAgICAgICBib2R5KSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIHF1ZXN0aW9uID0gZnVuY3Rpb24ocXVlc3Rpb24pe1xuXG4gICAgICAgICAgICB2YXIgcXVlc3Rpb25fdGl0bGUgPSBkaXYoe1xuICAgICAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6IFwicXVlc3Rpb25fdGl0bGVcIn0sIFtcbiAgICAgICAgICAgICAgICBxdWVzdGlvbi50ZXh0XSk7XG5cbiAgICAgICAgICAgIHZhciBxdWVzdGlvbl9zZWNvbmRzID0gZGl2KHtcbiAgICAgICAgICAgICAgICBcImNsYXNzTmFtZVwiOiBcInF1ZXN0aW9uX3NlY29uZHNcIn0sXG4gICAgICAgICAgICAgICAgTWF0aC5mbG9vcigoKHF1ZXN0aW9uLmFuc3dlcl90aW1lfHxEYXRlLm5vdygpKS1xdWVzdGlvbi50aW1lKS8xMDAwKSsnXCInKTtcblxuICAgICAgICAgICAgdmFyIHF1ZXN0aW9uX3BlcnNvbnMgPSBkaXYoe1xuICAgICAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6IFwicXVlc3Rpb25fcGVyc29uc1wifSxcbiAgICAgICAgICAgICAgICBxdWVzdGlvbi5wZXJzb25zK1wi7JuDXCIpOyAvLyDwn5GkXG5cbiAgICAgICAgICAgIHZhciBxdWVzdGlvbl9oZWFkX2JveCA9IGRpdih7XG4gICAgICAgICAgICAgICAgXCJjbGFzc05hbWVcIjogXCJxdWVzdGlvbl9oZWFkX2JveFwifSxbXG4gICAgICAgICAgICAgICAgcXVlc3Rpb25fc2Vjb25kcyxcbiAgICAgICAgICAgICAgICBxdWVzdGlvbl9wZXJzb25zXSk7XG5cbiAgICAgICAgICAgIHZhciBxdWVzdGlvbl9hY2NlcHRlZCA9IGRpdih7XG4gICAgICAgICAgICAgICAgXCJvbkNsaWNrXCI6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUuYWN0KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOlwiYWNjZXB0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcInVzZXJfaWRcIjogdGhpcy5zdGF0ZS5pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwicXVlc3Rpb25faWRcIjpxdWVzdGlvbi5pZH0pKCk7XG4gICAgICAgICAgICAgICAgfS5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJxdWVzdGlvbl9hY2NlcHRpb24gXCIrKHF1ZXN0aW9uLnN0YXR1cz09PVwiYWNjZXB0ZWRcIj9cImFjY2VwdGVkXCI6XCJcIil9LFxuICAgICAgICAgICAgICAgIFwi4pyTXCIpO1xuXG4gICAgICAgICAgICB2YXIgcXVlc3Rpb25fcmVmdXNlZCA9IGRpdih7XG4gICAgICAgICAgICAgICAgXCJvbkNsaWNrXCI6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUuYWN0KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOlwicmVmdXNlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcInVzZXJfaWRcIjogdGhpcy5zdGF0ZS5pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwicXVlc3Rpb25faWRcIjpxdWVzdGlvbi5pZH0pKCk7XG4gICAgICAgICAgICAgICAgfS5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6XCJxdWVzdGlvbl9hY2NlcHRpb24gXCIrKHF1ZXN0aW9uLnN0YXR1cz09PVwicmVmdXNlZFwiP1wicmVmdXNlZFwiOlwiXCIpfSxcbiAgICAgICAgICAgICAgICBcIuKcl1wiKTtcblxuICAgICAgICAgICAgdmFyIHF1ZXN0aW9uX2FjY2VwdGlvbl9ib3ggPSBkaXYoe1xuICAgICAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6IFwicXVlc3Rpb25fYWNjZXB0aW9uX2JveFwifSxbXG4gICAgICAgICAgICAgICAgcXVlc3Rpb25fYWNjZXB0ZWQsXG4gICAgICAgICAgICAgICAgcXVlc3Rpb25fcmVmdXNlZF0pO1xuXG5cbiAgICAgICAgICAgIHZhciBxdWVzdGlvbl9oZWFkID0gZGl2KHtcbiAgICAgICAgICAgICAgICBcImNsYXNzTmFtZVwiOiBcInF1ZXN0aW9uX2hlYWRcIn0sW1xuICAgICAgICAgICAgICAgIHF1ZXN0aW9uX2hlYWRfYm94LFxuICAgICAgICAgICAgICAgIHF1ZXN0aW9uX2FjY2VwdGlvbl9ib3hdKTtcblxuICAgICAgICAgICAgdmFyIHF1ZXN0aW9uX2Fuc3dlciA9IGRpdih7XG4gICAgICAgICAgICAgICAgXCJjbGFzc05hbWVcIjogXCJxdWVzdGlvbl9hbnN3ZXJcIn0sW1xuICAgICAgICAgICAgICAgIHF1ZXN0aW9uLmFuc3dlciAhPT0gXCJcIlxuICAgICAgICAgICAgICAgICAgICA/IHF1ZXN0aW9uLmFuc3dlclxuICAgICAgICAgICAgICAgICAgICA6IFwiRXNwZXJhbmRvIHJlc3Bvc3RhLi4uXCJdKTtcblxuICAgICAgICAgICAgdmFyIHF1ZXN0aW9uX2JvZHkgPSBkaXYoe1xuICAgICAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6IFwicXVlc3Rpb25fYm9keVwifSxbXG4gICAgICAgICAgICAgICAgcXVlc3Rpb25fdGl0bGUsXG4gICAgICAgICAgICAgICAgcXVlc3Rpb25fYW5zd2VyXSk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4gZGl2KHtcbiAgICAgICAgICAgICAgICBcImNsYXNzTmFtZVwiOiBcInF1ZXN0aW9uXCJ9LFtcbiAgICAgICAgICAgICAgICBxdWVzdGlvbl9oZWFkLFxuICAgICAgICAgICAgICAgIHF1ZXN0aW9uX2JvZHlcbiAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgfS5iaW5kKHRoaXMpO1xuXG4gICAgICAgIHZhciBzdCA9IHRoaXMuc3RhdGU7XG5cblxuXG4gICAgICAgIC8vIEhPTUUgUEFHRVxuXG4gICAgICAgIHZhciBsb2dvID0gZGl2KHtcbiAgICAgICAgICAgIFwib25DbGlja1wiOiBmdW5jdGlvbigpeyBzdC5wYWdlID0gXCJob21lXCI7IH0uYmluZCh0aGlzKSxcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6IHN0LnBhZ2UgPT09IFwiaG9tZVwiID8gXCJsb2dvXCIgOiBcImxvZ29fc21hbGxcIn0sXG4gICAgICAgICAgICBcImR1bm5vXCIpO1xuXG4gICAgICAgIHZhciBxdWVzdGlvbl9maWVsZCA9IGRpdih7fSwgaW5wdXQoe1xuICAgICAgICAgICAgXCJpZFwiOiBcInF1ZXN0aW9uX2ZpZWxkXCIsXG4gICAgICAgICAgICBcImtleVwiOiBcInF1ZXN0aW9uX2ZpZWxkXCIsXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOiBcInF1ZXN0aW9uX2ZpZWxkXCIsXG4gICAgICAgICAgICBcIm9uS2V5UHJlc3NcIjogZnVuY3Rpb24oZSl7IGlmIChlLndoaWNoID09PSAxMykgYXNrKCk7IH0sXG4gICAgICAgICAgICBcIm9uQ2hhbmdlXCI6IGZ1bmN0aW9uKGUpe1xuICAgICAgICAgICAgICAgIHN0LnF1ZXN0aW9uID0gZS50YXJnZXQudmFsdWU7XG4gICAgICAgICAgICAgICAgdGhpcy5mb3JjZVVwZGF0ZSgpO1xuICAgICAgICAgICAgfS5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwidGV4dFwifSkpO1xuXG4gICAgICAgIHZhciBhc2sgPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgaWYgKHN0LnF1ZXN0aW9uLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZS5hY3Qoe1xuICAgICAgICAgICAgICAgIFwidHlwZVwiICAgICA6IFwiYXNrXCIsXG4gICAgICAgICAgICAgICAgXCJxdWVzdGlvblwiIDogc3QucXVlc3Rpb24sXG4gICAgICAgICAgICAgICAgXCJ0aW1lXCIgICAgIDogRGF0ZS5ub3coKSxcbiAgICAgICAgICAgICAgICBcInVzZXJfaWRcIiAgOiBzdC5pZH0pKCk7XG4gICAgICAgICAgICBzdC5xdWVzdGlvbiA9IFwiXCI7XG4gICAgICAgICAgICBzdC5wYWdlID0gXCJ3YWxsXCI7XG4gICAgICAgICAgICB0aGlzLmZvcmNlVXBkYXRlKCk7XG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInF1ZXN0aW9uX2ZpZWxkXCIpLnZhbHVlID0gXCJcIjtcbiAgICAgICAgfS5iaW5kKHRoaXMpO1xuXG4gICAgICAgIHZhciBhc2tfYnV0dG9uID0gZGl2KHtcbiAgICAgICAgICAgIFwiaWRcIjogXCJhc2tfYnV0dG9uXCIsXG4gICAgICAgICAgICBcImtleVwiOiBcImFza19idXR0b25cIixcbiAgICAgICAgICAgIFwib25DbGlja1wiOiBhc2ssXG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOiBcImJ1dHRvbiBhc2tfYnV0dG9uXCJ9LFxuICAgICAgICAgICAgW1wiRmF6ZXIgcGVyZ3VudGFcIl0pO1xuXG4gICAgICAgIHZhciBxdWlja19idXR0b24gPSBkaXYoe1xuICAgICAgICAgICAgXCJpZFwiOiBcInF1aWNrX2J1dHRvblwiLFxuICAgICAgICAgICAgXCJrZXlcIjogXCJxdWlja19idXR0b25cIixcbiAgICAgICAgICAgIFwib25DbGlja1wiOiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIHN0LnBhZ2UgPSBcImFuc3dlcmluZ1wiO1xuICAgICAgICAgICAgICAgIHRoaXMuZm9yY2VVcGRhdGUoKTtcbiAgICAgICAgICAgIH0uYmluZCh0aGlzKSxcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6IFwiYnV0dG9uIHF1aWNrX2J1dHRvblwifSxcbiAgICAgICAgICAgIFtcIlByZWZpcm8gcmVzcG9uZGVyXCJdKTtcblxuICAgICAgICB2YXIgYnV0dG9uc19jb250YWluZXIgPSBkaXYoe1xuICAgICAgICAgICAgXCJrZXlcIjogXCJidXR0b25zX2NvbnRhaW5lclwiLFxuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjogXCJidXR0b25fY29udGFpbmVyXCJ9LFxuICAgICAgICAgICAgW2Fza19idXR0b24sIHF1aWNrX2J1dHRvbl0pO1xuXG4gICAgICAgIHZhciBob21lID0gZGl2KHtcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6IFwiaG9tZVwifSxcbiAgICAgICAgICAgIFtsb2dvLCBxdWVzdGlvbl9maWVsZCwgYnV0dG9uc19jb250YWluZXJdKTtcblxuXG5cbiAgICAgICAgLy8gV0FMTFMgUEFHRVxuXG4gICAgICAgIHZhciB3YWxsX3RvcCA9IGRpdih7XG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOiBcIndhbGxfdG9wXCJ9LFxuICAgICAgICAgICAgY2VudHJhbGl6ZShcbiAgICAgICAgICAgICAgICBkaXYoe1xuICAgICAgICAgICAgICAgICAgICBcImNsYXNzTmFtZVwiOiBcIndhbGxfdG9wX2NvbnRlbnRcIn0sIFtcbiAgICAgICAgICAgICAgICAgICAgbG9nbyxcbiAgICAgICAgICAgICAgICAgICAgcXVlc3Rpb25fZmllbGQsXG4gICAgICAgICAgICAgICAgICAgIGFza19idXR0b24sXG4gICAgICAgICAgICAgICAgICAgIHF1aWNrX2J1dHRvbl0pKSk7XG5cbiAgICAgICAgdmFyIG15X3F1ZXN0aW9ucyA9IHN0LnF1ZXN0aW9ucy5maWx0ZXIoZnVuY3Rpb24ocXVlc3Rpb24pe1xuICAgICAgICAgICAgcmV0dXJuIHF1ZXN0aW9uLnVzZXJfaWQgPT09IHN0LmlkO1xuICAgICAgICB9LmJpbmQodGhpcykpLnJldmVyc2UoKTtcblxuICAgICAgICB2YXIgd2FsbF9ib2R5ID0gY2VudHJhbGl6ZShteV9xdWVzdGlvbnMubWFwKHF1ZXN0aW9uKSk7XG5cbiAgICAgICAgdmFyIHdhbGwgPSBkaXYoe1xuICAgICAgICAgICAgXCJjbGFzc05hbWVcIjogXCJ3YWxsXCJ9LFxuICAgICAgICAgICAgW3dhbGxfdG9wLCB3YWxsX2JvZHldKTtcblxuXG5cbiAgICAgICAgLy8gQU5TV0VSSU5HIFBBR0VcblxuICAgICAgICB2YXIgYW5zd2VyaW5nX3BvaW50cyA9IGRpdih7XG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOiBcImFuc3dlcmluZ19wb2ludHNcIn0sXG4gICAgICAgICAgICBcIihcIit0aGlzLnN0YXRlLnBvaW50cytcIiBwb250b1wiKyh0aGlzLnN0YXRlLnBvaW50cz09PTE/XCJcIjpcInNcIikrXCIhKVwiKTtcblxuICAgICAgICB2YXIgYW5zd2VyaW5nX3RvcCA9IGRpdih7XG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOiBcImFuc3dlcmluZ190b3BcIn0sW1xuICAgICAgICAgICAgbG9nbyxcbiAgICAgICAgICAgIGFuc3dlcmluZ19wb2ludHNdKTtcblxuICAgICAgICBmdW5jdGlvbiByYW5kKHNlZWQpe1xuICAgICAgICAgICAgcmV0dXJuIChzZWVkICogMTEwMzUxNTI0NSArIDEyMzQ1KSAmIDB4N2ZmZmZmZmY7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIHF1ZXN0aW9uX3RvX2Fuc3dlciA9IChmdW5jdGlvbigpe1xuICAgICAgICAgICAgdmFyIHF1ZXN0aW9uX3RvX2Fuc3dlciA9IG51bGw7XG4gICAgICAgICAgICB2YXIgcXVlc3Rpb25fdG9fYW5zd2VyX3JuZCA9IDA7XG4gICAgICAgICAgICB2YXIgcm5kID0gcmFuZChzdC5pZCk7XG4gICAgICAgICAgICBmb3IgKHZhciBpPTAsIGw9c3QucXVlc3Rpb25zLmxlbmd0aDsgaTxsOyArK2kpe1xuICAgICAgICAgICAgICAgIHZhciBybmQgPSByYW5kKHJuZCk7XG4gICAgICAgICAgICAgICAgaWYgKHJuZCA+IHF1ZXN0aW9uX3RvX2Fuc3dlcl9ybmRcbiAgICAgICAgICAgICAgICAgICAgJiYgc3QucXVlc3Rpb25zW2ldXG4gICAgICAgICAgICAgICAgICAgICYmIHN0LnF1ZXN0aW9uc1tpXS5hbnN3ZXIgPT09IFwiXCJcbiAgICAgICAgICAgICAgICAgICAgJiYgIXN0LmR1bm5vc1tpXSlcbiAgICAgICAgICAgICAgICAgICAgcXVlc3Rpb25fdG9fYW5zd2VyID0gc3QucXVlc3Rpb25zW2ldLFxuICAgICAgICAgICAgICAgICAgICBxdWVzdGlvbl90b19hbnN3ZXJfcm5kID0gcm5kO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBxdWVzdGlvbl90b19hbnN3ZXI7XG4gICAgICAgIH0pKCk7XG5cbiAgICAgICAgdmFyIGFuc3dlcmluZ19xdWVzdGlvbiA9IHF1ZXN0aW9uX3RvX2Fuc3dlciA/IHF1ZXN0aW9uKHF1ZXN0aW9uX3RvX2Fuc3dlcikgOiBbXTtcblxuICAgICAgICB2YXIgYW5zd2VyID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIHZhciBpbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYW5zd2VyaW5nX2lucHV0XCIpXG4gICAgICAgICAgICB0aGlzLnN0YXRlLmFjdCh7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCIgICAgICAgIDogXCJhbnN3ZXJcIixcbiAgICAgICAgICAgICAgICBcInRpbWVcIiAgICAgICAgOiBEYXRlLm5vdygpLFxuICAgICAgICAgICAgICAgIFwidXNlcl9pZFwiICAgICA6IHN0LmlkLFxuICAgICAgICAgICAgICAgIFwicXVlc3Rpb25faWRcIiA6IHF1ZXN0aW9uX3RvX2Fuc3dlci5pZCxcbiAgICAgICAgICAgICAgICBcImFuc3dlclwiICAgICAgOiBpbnB1dC52YWx1ZX0pKCk7XG4gICAgICAgICAgICBpbnB1dC52YWx1ZSA9IFwiXCI7XG4gICAgICAgIH0uYmluZCh0aGlzKTtcblxuICAgICAgICB2YXIgZHVubm8gPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgdGhpcy5zdGF0ZS5hY3Qoe1xuICAgICAgICAgICAgICAgIFwidHlwZVwiICAgICAgICA6IFwiZHVubm9cIixcbiAgICAgICAgICAgICAgICBcInVzZXJfaWRcIiAgICAgOiBzdC5pZCxcbiAgICAgICAgICAgICAgICBcInF1ZXN0aW9uX2lkXCIgOiBxdWVzdGlvbl90b19hbnN3ZXIuaWR9KSgpO1xuICAgICAgICB9LmJpbmQodGhpcylcblxuICAgICAgICB2YXIgYW5zd2VyaW5nX2Fuc3dlciA9IGRpdih7XG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOiBcImFuc3dlcmluZ19idXR0b25cIixcbiAgICAgICAgICAgIFwib25DbGlja1wiOiBhbnN3ZXJ9LFxuICAgICAgICAgICAgXCJSZXNwb25kZXJcIik7XG5cbiAgICAgICAgdmFyIGFuc3dlcmluZ19kdW5ubyA9IGRpdih7XG4gICAgICAgICAgICBcImNsYXNzTmFtZVwiOiBcImFuc3dlcmluZ19idXR0b25cIixcbiAgICAgICAgICAgIFwib25DbGlja1wiOiBkdW5ub30sXG4gICAgICAgICAgICBcIkR1bm5vXCIpXG5cbiAgICAgICAgdmFyIGFuc3dlcmluZ19tZW51ID0gZGl2KHtcbiAgICAgICAgICAgIFwiY2xhc3NOYW1lXCI6IFwiYW5zd2VyX21lbnVcIn0sIFtcbiAgICAgICAgICAgIGRpdih7fSwgaW5wdXQoe1xuICAgICAgICAgICAgICAgIFwiaWRcIjogXCJhbnN3ZXJpbmdfaW5wdXRcIixcbiAgICAgICAgICAgICAgICBcImNsYXNzTmFtZVwiOiBcImFuc3dlcmluZ19pbnB1dFwiLFxuICAgICAgICAgICAgICAgIFwib25LZXlEb3duXCI6IGZ1bmN0aW9uKGUpeyBpZiAoZS53aGljaCA9PT0gMTMpIGFuc3dlcigpOyB9fSkpLFxuICAgICAgICAgICAgZGl2KHt9LCBbYW5zd2VyaW5nX2Fuc3dlciwgYW5zd2VyaW5nX2R1bm5vXSldKTtcblxuICAgICAgICB2YXIgYW5zd2VyaW5nX2JvZHkgPSBkaXYoe1xuICAgICAgICAgICAgY2xhc3NOYW1lOiBcImFuc3dlcmluZ19ib2R5XCJ9LFtcbiAgICAgICAgICAgIGFuc3dlcmluZ19xdWVzdGlvbixcbiAgICAgICAgICAgIGFuc3dlcmluZ19tZW51XSk7XG5cbiAgICAgICAgLy92YXIgYW5zd2VyaW5nX3BvaW50cyA9IGRpdih7fSwgdGhpcy5zdGF0ZS5wb2ludHMrKClcIiBwb250b3MhXCIpO1xuXG4gICAgICAgIHZhciBhbnN3ZXJpbmdfZG9uZSA9IGRpdih7XG4gICAgICAgICAgICBjbGFzc05hbWU6IFwiYW5zd2VyaW5nX2RvbmVcIn0sIFtcbiAgICAgICAgICAgIFwiTmFkYSBwYXJhIHJlc3BvbmRlciEgRXNwZXJhbmRvIG5vdmFzIHF1ZXN0w7Vlcy5cIl0pO1xuXG4gICAgICAgIHZhciBhbnN3ZXJpbmcgPSBxdWVzdGlvbl90b19hbnN3ZXIgXG4gICAgICAgICAgICA/IGRpdih7fSwgW2Fuc3dlcmluZ190b3AsIGNlbnRyYWxpemUoYW5zd2VyaW5nX2JvZHkpXSlcbiAgICAgICAgICAgIDogZGl2KHt9LCBbYW5zd2VyaW5nX3RvcCwgY2VudHJhbGl6ZShhbnN3ZXJpbmdfZG9uZSldKTtcblxuICAgICAgICByZXR1cm4gKCBzdC5wYWdlID09PSBcImhvbWVcIiA/IGhvbWUgXG4gICAgICAgICAgICAgICA6IHN0LnBhZ2UgPT09IFwid2FsbFwiID8gd2FsbFxuICAgICAgICAgICAgICAgOiBhbnN3ZXJpbmcpO1xuICAgIH1cbn0pO1xuXG53aW5kb3cub25sb2FkID0gZnVuY3Rpb24oKXtcbiAgICBSZWFjdERPTS5yZW5kZXIoXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoRHVubm8sIG51bGwpLFxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGVzdCcpKTtcbn07XG4iXX0=
